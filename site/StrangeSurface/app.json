[{"name":"app.R","content":"webr::install(\"rmarchingcubes\")\r\nwebr::install(\"r3js\")\r\n\r\nlibrary(rmarchingcubes)\r\nlibrary(r3js)\r\n\r\nf <- function(x, y, z, alpha) {\r\n  A <- cospi(alpha)\r\n  B <- sinpi(alpha)\r\n  B2 <- B*B\r\n  AB2 <- A*B2\r\n  z2 <- z*z\r\n  z4 <- z2*z2\r\n  z4*(B2-2*A-2) + 4*x*y^2*(AB2-4*B2) + x*z2*(AB2-B2) + \r\n    3*z2*(AB2-2*A+2) + x*(B2-AB2) + AB2 - B2\r\n}\r\n\r\n# library(cOde)\r\n# jacobianSymb(\r\n#   c(f = \"z^4*(B2-2*A-2) + 4*x*y^2*(AB2-4*B2) + x*z^2*(AB2-B2) + 3*z^2*(AB2-2*A+2) + x*(B2-AB2) + AB2 - B2\"),\r\n#   c(\"x\", \"y\", \"z\")\r\n# )\r\n\r\ngrad <- function(x, y, z, alpha) {\r\n  A <- cospi(alpha)\r\n  B <- sinpi(alpha)\r\n  B2 <- B*B\r\n  AB2 <- A*B2\r\n  z2 <- z*z\r\n  z3 <- z*z2\r\n  cbind(\r\n    4*(AB2-4*B2)*y^2 + (AB2-B2)*(z2 - 1), \r\n    8*(AB2-4*B2)*x*y,\r\n    4**(B2-2*A-2)*z3 + 2*(AB2-B2)*x*z + 6*(AB2-2*A+2)*z\r\n  )\r\n}\r\n\r\nh <- function(ρ, θ, ϕ, alpha){\r\n  x <- ρ * cos(θ) * sin(ϕ)\r\n  y <- ρ * sin(θ) * sin(ϕ)\r\n  z <- ρ * cos(ϕ)\r\n  f(x, y, z, alpha)\r\n}\r\n\r\n# make grid\r\nnρ <- 100L; nθ <- 200L; nϕ <- 100L\r\nρ_ <- seq(0, 3.05, length.out = nρ) # ρ runs from 0 to the desired radius\r\nθ_ <- seq(0, 2*pi, length.out = nθ)\r\nϕ_ <- seq(0, pi, length.out = nϕ) \r\nG <- expand.grid(Rho = ρ_, Theta = θ_, Phi = ϕ_)\r\n\r\n\r\n#--- SHINY APP ----####\r\nlibrary(shiny)\r\n\r\ncss <- \"\r\n#info {\r\n  background-color: #ddd;\r\n}\r\n\"\r\n\r\n# shiny UI ####\r\nui <- fluidPage(\r\n  tags$head(\r\n    tags$style(HTML(css))\r\n  ),\r\n  sidebarLayout(\r\n    sidebarPanel(\r\n      sliderInput(\r\n        \"alpha\", \"alpha\", min = 2.2, max = 3.8, value = 3, step = 0.1\r\n      ),\r\n      br(),\r\n      textOutput(\"info\")\r\n    ),\r\n    mainPanel(\r\n      r3jsOutput(\"surface\", height = \"512px\")\r\n    )\r\n  )\r\n)\r\n\r\n# shinyServer ####\r\nserver <- function(input, output, session) {\r\n\r\n  Mesh <- reactive({\r\n    # voxel\r\n    alpha <- input[[\"alpha\"]] / 4\r\n    voxel <- with(G, array(h(Rho, Theta, Phi, alpha), dim = c(nρ, nθ, nϕ)))\r\n    # 3d contour\r\n    surf <- contour3d(voxel, level = 0, x = ρ_, y = θ_, z = ϕ_)\r\n    # transform to Cartesian coordinates\r\n    ρθϕ <- surf[[\"vertices\"]]\r\n    ρ <- ρθϕ[, 1L]; θ <- ρθϕ[, 2L]; ϕ <- ρθϕ[, 3L] \r\n    vertices <- cbind(\r\n      ρ * cos(θ) * sin(ϕ),\r\n      ρ * sin(θ) * sin(ϕ),\r\n      ρ * cos(ϕ)\r\n    )\r\n    triangles <- surf[[\"triangles\"]]\r\n    normals <- -grad(vertices[, 1L], vertices[, 2L], vertices[, 3L], alpha)\r\n    list(vertices, triangles, normals)\r\n  })\r\n  \r\n  output[[\"surface\"]] <- renderR3js({\r\n    mesh <- Mesh()\r\n    vertices <- mesh[[1L]]\r\n    r3js(\r\n      shape3js(\r\n        plot3js.window(\r\n          plot3js.new(),\r\n          xlim = range(vertices[, 1L]),\r\n          ylim = range(vertices[, 2L]),\r\n          zlim = range(vertices[, 3L]),\r\n          aspect = c(1, 1, 1)\r\n        ),\r\n        vertices = vertices,\r\n        faces = mesh[[2L]],\r\n        normals = mesh[[3L]],\r\n        col = \"maroon\"\r\n      )\r\n    )\r\n  })\r\n  \r\n  output[[\"info\"]] <- renderText({\r\n    if(packageVersion(\"r3js\") <= \"0.0.2\") {\r\n      paste0(\r\n        \"When you change `alpha`, the new plot is added to the previous one. \",\r\n        \"You have to upgrade the 'r3js' package to get rid of this bug.\" \r\n      )\r\n    }\r\n  })\r\n  \r\n}\r\n\r\n# shiny app object ----\r\nshinyApp(ui, server)\r\n","type":"text"},{"name":"global.R","content":[],"type":"text"}]
