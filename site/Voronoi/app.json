[{"name":"app.R","content":"webr::install(deldir)\r\nlibrary(deldir)\r\n\r\nn <- 256L\r\nx_ <- y_ <- seq(0, 1, length.out = n)\r\nM <- matrix(NA_real_, nrow = n, ncol = n)\r\n\r\nvoronoi <- function(x, y) {\r\n  z <- deldir(x, y, rw = c(0, 1, 0, 1))\r\n  vrn <- tile.list(z, clipp = list(x = c(0, 1, 1, 0), y = c(0, 0, 1, 1)))\r\n  sites <- vapply(vrn, function(cell) {\r\n    cell$pt\r\n  }, FUN.VALUE = numeric(2L))\r\n  list(vrn, sites)\r\n}\r\n\r\ncolorMatrix <- function(vrn) {\r\n  w <- vrn[[1L]]; sites <- vrn[[2L]]\r\n  nearestSite <- function(xy) {\r\n    dists <- apply(sites, 2L, function(pt) {\r\n      c(crossprod(pt - xy))\r\n    })\r\n    which.min(dists)\r\n  }\r\n  maxDists <- vapply(w, function(cell) {\r\n    plg <- rbind(cell$x, cell$y)\r\n    sqrt(max(apply(plg, 2L, function(xy) {\r\n      c(crossprod(xy - cell$pt))\r\n    })))\r\n  }, FUN.VALUE = numeric(1L))\r\n  clr <- function(x, y) {\r\n    xy <- c(x, y)\r\n    siteIndex <- nearestSite(xy)\r\n    maxd <- maxDists[siteIndex]\r\n    site <- w[[siteIndex]][[\"pt\"]]\r\n    min(1, sqrt(c(crossprod(xy - site))) / maxd)\r\n  }\r\n  #\r\n  for(i in 1L:n) {\r\n    for(j in 1L:n) {\r\n      M[i, j] <- clr(x_[i], 1-y_[j])\r\n    }\r\n  }\r\n  M\r\n}\r\n\r\nisDark <- function(color) {\r\n  rgb <- col2rgb(color)\r\n  rgb[1]*0.299 + rgb[2]*0.587 + rgb[3]*0.114 < 186\r\n}\r\n\r\nplotRaster <- function(M, vrn, paltt = \"Grays\", bias = 1) {\r\n  colors <- hcl.colors(100L, paltt)\r\n  borderColor <- ifelse(isDark(colors[length(colors)]), \"black\", \"white\") \r\n  fcol <- colorRamp(colors, bias = bias, interpolate = \"spline\")\r\n  img_rgb <- fcol(t(M))\r\n  img <- rgb(img_rgb[, 1L], img_rgb[, 3L], img_rgb[, 3L], maxColorValue = 255)\r\n  img <- matrix(img, nrow = n, ncol = n)\r\n  w <- vrn[[1L]]; sites <- vrn[[2L]]\r\n  par(mar = c(0, 0, 0, 0))\r\n  plot(\r\n    NULL, asp = 1, xlim = c(0, 1), ylim = c(0, 1), lwd =5,  \r\n    xlab = NA, ylab = NA, axes = FALSE, xaxs = \"i\", yaxs = \"i\"\r\n  )\r\n  rasterImage(img, 0, 0, 1, 1)\r\n  points(t(sites), col = \"red\", pch = 19)\r\n  plot(w, add = TRUE, border = borderColor)\r\n}\r\n\r\n\r\n####---- SHINY APP ----####\r\nlibrary(shiny)\r\nlibrary(bslib)\r\n\r\nui <- page_sidebar(\r\n  plotOutput(\"tessellation\", width = \"512px\", height = \"512px\", fill = FALSE),\r\n  sidebar = sidebar(\r\n    splitLayout(\r\n      actionButton(\"generate\", \"New sites\"),\r\n      numericInput(\r\n        \"nsites\", \"# sites\", value = 10, min = 5, step = 5\r\n      )\r\n    ),\r\n    selectInput(\r\n      \"palette\", \"Palette\", choices = hcl.pals(), selected = \"Grays\"\r\n    ),\r\n    numericInput(\r\n      \"bias\", \"Bias\", value = 0.5, min = 0.2, step = 0.05\r\n    ),\r\n    width = \"30%\"\r\n  ),\r\n  theme = bs_theme(bootswatch = \"darkly\")\r\n)\r\n\r\nserver <- function(input, output, session) {\r\n  \r\n  XY <- eventReactive(input[[\"generate\"]], {\r\n    nsites <- input[[\"nsites\"]]\r\n    list(x = runif(nsites), y = runif(nsites))\r\n  }, ignoreNULL = FALSE)\r\n  \r\n  Voronoi <- eventReactive(XY(), {\r\n    x <- XY()[[\"x\"]]; y <- XY()[[\"y\"]]\r\n    voronoi(x, y)\r\n  })\r\n  \r\n  ColorMatrix <- eventReactive(Voronoi(), {\r\n    x <- XY()[[\"x\"]]; y <- XY()[[\"y\"]]\r\n    vrn <- voronoi(x, y)\r\n    colorMatrix(vrn)\r\n  })\r\n  \r\n  output[[\"tessellation\"]] <- renderPlot({\r\n    plotRaster(\r\n      ColorMatrix(), Voronoi(), input[[\"palette\"]], input[[\"bias\"]]\r\n    )\r\n  })\r\n  \r\n}\r\n\r\n# Create Shiny app ----\r\nshinyApp(ui, server)\r\n","type":"text"}]
